name: Deploy Spring Boot to EC2

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/deploy-backend.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # GitHub Actions에서 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test --no-daemon
        timeout-minutes: 10

      # rsync로 JAR 파일을 EC2에 전송
      - name: Deploy JAR to EC2 via rsync
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --progress --human-readable
          path: build/libs/
          remote_path: /home/ubuntu/ecc-back/build/libs/
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USER }}
          remote_key: ${{ secrets.EC2_SSH_KEY }}

      # 1단계: 기존 컨테이너 정리 (빠르게)
      - name: Cleanup existing containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 120s
          script: |
            cd ~/ecc-back
            source ~/load-env.sh
            docker compose down || true
            docker system prune -f
            echo "✅ Cleanup completed"

      # 2단계: 컨테이너 시작 (별도 단계로 분리)
      - name: Start containers
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 600s
          script: |
            cd ~/ecc-back
            source ~/load-env.sh
            
            echo "🐳 Starting containers..."
            docker compose up -d
            
            echo "⏳ Waiting for startup..."
            sleep 30
            
            echo "✅ Containers started"
            docker compose ps

      # 3단계: API 테스트 (별도 단계로 분리)
      - name: Verify deployment
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          script: |
            echo "🩺 Testing API..."
            
            # 5번 재시도
            for i in {1..5}; do
              if curl -f -s -m 10 http://localhost:8080/api/major >/dev/null 2>&1; then
                echo "✅ API test successful (attempt $i)"
                echo "🎉 Deployment completed successfully!"
                exit 0
              else
                echo "⏳ API not ready, waiting... (attempt $i/5)"
                sleep 15
              fi
            done
            
            echo "❌ API test failed after 5 attempts"
            echo "Container status:"
            docker compose ps
            exit 1